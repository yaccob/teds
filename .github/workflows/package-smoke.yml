name: package-smoke

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

concurrency:
  group: package-smoke-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build wheel and sdist
        run: |
          python -m pip install -U pip build twine
          python -m build
          twine check dist/*

      - name: Assert wheel/sdist content
        run: |
          python - << 'PY'
          import glob, zipfile, tarfile, sys
          wheels = glob.glob('dist/*.whl')
          sdists = glob.glob('dist/*.tar.gz')
          assert wheels, 'no wheel built'
          assert sdists, 'no sdist built'
          def wheel_ok(p):
              with zipfile.ZipFile(p) as z:
                  names = set(z.namelist())
                  root = {'spec_schema.yaml','teds_compat.yaml'}
                  pkg = {'teds_core/spec_schema.yaml','teds_core/teds_compat.yaml'}
                  return root <= names or pkg <= names
          def sdist_ok(p):
              with tarfile.open(p, 'r:gz') as t:
                  names = {m.name.split('/',1)[-1] for m in t.getmembers() if m.isfile()}
                  return 'spec_schema.yaml' in names and 'teds_compat.yaml' in names
          assert all(wheel_ok(w) for w in wheels), 'wheel missing required resources'
          assert any(sdist_ok(s) for s in sdists), 'sdist missing required resources'
          print('artifact content OK')
          PY

      - name: Install from wheel in clean venv and smoke-test
        shell: bash
        run: |
          set -euo pipefail
          python -m venv .pkg-smoke
          . .pkg-smoke/bin/activate
          python -m pip install -U pip
          pip install dist/*.whl
          # CLI version string
          teds --version | sed -n '1p'
          # Resource loads
          python - << 'PY'
          from teds_core.resources import read_text_resource as r
          assert r('spec_schema.yaml')
          assert r('teds_compat.yaml')
          print('resource load OK')
          PY
          # verify demo; expect rc=1
          set +e
          teds verify demo/sample_tests.yaml --output-level warning > /tmp/out.yaml
          rc=$?
          set -e
          echo "verify rc: $rc"
          test "$rc" -eq 1
          # generate smoke
          teds generate demo/sample_schemas.yaml
          test -f demo/sample_schemas.tests.yaml
          deactivate

